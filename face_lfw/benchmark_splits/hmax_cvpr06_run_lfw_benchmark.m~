% hmax_cvpr06_run_cal101 - Demo script that performs multiclass classification.
%
% This script runs hmax against the Caltech 101 dataset using the model
% configuration of [Mutch & Lowe 2006].  With minor modifications it could run
% on any similar dataset.
%
% The script does everything in the paper (for the multiclass problem) except
% the final feature selection step.  (The feature selection step doesn't improve
% the classification score much -- it just reduces the number of features needed
% for the model.)
%
% You will have to copy and edit this script to provide the path of the Caltech
% 101 (or similar) dataset on your system.
%
% You might also want to insert "save" commands at appropriate points in this
% script, as it will take some time to run.
%
% See hmax_cvpr06_run_simple for more comments on individual command usage.
%
% See also: hmax_cvpr06_run_simple, hmax_cvpr06_run_uiuc.

%-----------------------------------------------------------------------------------------------------------------------

% while true
%     ans = lower(strtrim(input('All variables will be cleared.  Is this okay (y/n) ? ', 's')));
%     if isempty(ans), continue; end
%     if ans(1) == 'y', break; end
%     if ans(1) == 'n', return; end
% end    

function c2s = hmax_cvpr06_run_lfw_benchmark(uniqTotalSet, parameters)

fprintf('\n');

%-----------------------------------------------------------------------------------------------------------------------

% Edit this section to supply script parameters.
if strcmp(computer, 'MACI64')
dataPath = '/Users/aarslan/Documents/Databases/lfw';                % Path where the Caltech 101 dataset can be found (*** required ***).
else
  dataPath = '/gpfs/data/tserre/data/face_database/lfw';    
end

if strcmp(parameters, 'cvpr')
p = hmax_cvpr06_params_full;  % Model configuration to use.  Note that this script assumes that the only stage having
                              % learned features is called "s2" and that the top stage is called "c2".
else
p = hmax_pnas07_params
end                  

numFeatures = 4096;           % Number of S2 features to learn.
numTrain    = 8;             % Number of training images per category.
maxTest     = inf;            % Maximum number of test images per category.
minSetSize  = 15;              % minimum number of images for a person required to include that person in the classification.

%-----------------------------------------------------------------------------------------------------------------------

if isempty(dataPath)
    error('you must edit this script to supply the path of the Caltech 101 dataset (variable "dataPath")');
end

if ~exist(fullfile(dataPath, 'Aaron_Eckhart'), 'dir')
    error('cannot find the faces in the wild dataset at path "%s"', dataPath);
end

%-----------------------------------------------------------------------------------------------------------------------

picPaths = [repmat({dataPath}, numel(uniqTotalSet),1), uniqTotalSet];
picPaths = cellfun(@(paths,pics) [paths '/' pics(1:end-5) '/' pics '.jpg'], picPaths(:,1), picPaths(:,2),'uni',false);

%-----------------------------------------------------------------------------------------------------------------------

lib = struct;

m = hmax.Model(p, lib);
cns('init', m);

count = min(numel(picPaths), numFeatures);

% load precomputed dictionnary
if exist( 'dictionary_hmax.mat','file')==2
    load('dictionary_hmax.mat');
else
    warning('The hmax dictionnary has not been computed.');
    
    fprintf('CREATING S2 FEATURE DICTIONARY BY SAMPLING FROM TRAINING IMAGES\n');

    picListForDic = randperm(numel(uniqTotalSet));
    picListForDic = picListForDic(1:numFeatures);
    
    d = hmax_s.EmptyDict(m, m.s2, numFeatures);
    
    for i = 1 : count
        
        numSamples = floor(numFeatures / count);
        if i <= mod(numFeatures, count), numSamples = numSamples + 1; end
        
        fprintf('%u/%u: sampling %u feature(s) from %s\n', i, count, numSamples, picPaths{i});
        
        hmax.LoadImage(m, picPaths{i});
        cns('run');
        
        d = hmax_s.SampleFeatures(m, m.s2, d, numSamples);
        
    end
    
    cns('done');
    
    d = hmax_s.SortFeatures(d);
    
    if cns_istype(m, -m.s2, 'ss')
        d = hmax_ss.SparsifyDict(d);
    end
    
end

lib.groups{m.s2} = d;

clear count d i numSamples;

%-----------------------------------------------------------------------------------------------------------------------

fprintf('COMPUTING C2 VECTORS FOR TRAINING IMAGES\n');

m = hmax.Model(p, lib);
cns('init', m);

c2s = zeros(0, numel(picPaths), 'single');
%c1s = zeros(0, numel(picPaths), 'single');

for i = 1 : numel(uniqTotalSet)

    fprintf('%u/%u: computing C2 vector for %s\n', i, numel(uniqTotalSet), picPaths{i});

    hmax.LoadImage(m, picPaths{i});
    cns('run');
    
    c1 = cns('get', -m.c1_orig, 'val');
    c1temp = [];
    for k=1:length(c1)
        c1temp = [c1temp c1{k}(:)'];
    end
    c1s(:,i) = c1temp;
    
    c2 = cns('get', -m.c2, 'val');
    c2 = cat(1, c2{:});
    c2s(1 : numel(c2), i) = c2;
    

end

cns('done');

clear i c2;

end
